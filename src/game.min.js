import{Grass}from"./GameObjects/grass.js";import{TreasureHunter}from"./GameObjects/treasureHunter.js";import{GameBoard}from"./gameBoard.js";import{DrawTypes}from"./GameObjects/gameObject.js";import{Enemy}from"./GameObjects/enemy.js";import{ImageManager}from"./Helpers/imageManager.js";const canvas=document.getElementById("game-canvas"),context=canvas.getContext("2d");class Game{constructor(e,a,t,r=25,s=25,i=3,n=200){this.canvasWidth=a,this.canvasHeight=t,this._context=e,this.callbacks={keydown:this._keydown.bind(this)},this._imageManager=new ImageManager,this._loadAllImages(),this._gameboard=new GameBoard(a,t,r,s,i,n,this._onAllTreasureCollected),this._treasureHunter=new TreasureHunter(this._gameboard,this._onTreasureCollected),this._enemy=new Enemy(this._gameboard,this._treasureHunter),this._gameboard.placeTreasureHunterAndEnemy(this._treasureHunter,this._enemy),this.bindEvents()}_loadAllImages=()=>{this._imageManager.loadImage("./img/tile-grass-1.webp"),this._imageManager.loadImage("./img/tile-grass-2.webp"),this._imageManager.loadImage("./img/tile-grass-3.webp"),this._imageManager.loadImage("./img/tile-treasure-1.webp"),this._imageManager.loadImage("./img/tile-wall-1.webp"),this._imageManager.loadImage("./img/tile-wall-2.webp"),this._imageManager.loadImage("./img/tile-wall-3.webp")};bindEvents=()=>{document.addEventListener("keydown",this.callbacks.keydown,!1)};unbindEvents=()=>{document.addEventListener("keydown",this.callbacks.keydown,!1)};_keydown=e=>{let a=!1;switch(e.key){case"ArrowLeft":e.preventDefault(),a=this._treasureHunter.moveLeft();break;case"ArrowRight":e.preventDefault(),a=this._treasureHunter.moveRight();break;case"ArrowDown":e.preventDefault(),a=this._treasureHunter.moveDown();break;case"ArrowUp":e.preventDefault(),a=this._treasureHunter.moveUp();break}a&&(this._enemy.moveToTreasureHunter(),this._drawGame())};_drawGameObject=e=>{switch(this._context.fillStyle=e?.color??"pink",e.type){case DrawTypes.IMG:let a=this._imageManager.loadImage(e.imgSrc);if(a?.complete){this._context.drawImage(a,e.x*e.width,e.y*e.height,e.width,e.height);break}case DrawTypes.RECT:this._context.fillRect(e.x*e.width,e.y*e.height,e.width,e.height);break;case DrawTypes.CIRCLE:this._context.beginPath(),this._context.arc(e.x*e.width+e.width/2,e.y*e.height+e.height/2,e.width/2,0,2*Math.PI,!1),this._context.fill();break;default:}};_drawBoard=()=>{if(this._gameboard.tiles.length>0){this._gameboard.tiles.forEach((e=>{e.forEach((e=>{this._drawGameObject(e)}))}));let e=(new Grass).color;this._gameboard.tiles.forEach((a=>{a.forEach((a=>{"Grass"===a.constructor.name&&(a.color=e)}))}))}};_drawGame=()=>{this._drawBoard(),this._drawGameObject(this._treasureHunter),this._drawGameObject(this._enemy)};_onTreasureCollected=e=>{this._gameboard.collectTreasureTile(e)};_onAllTreasureCollected=()=>{this._gameboard.generateBoard(),this._gameboard.placeTreasureHunterAndEnemy(this._treasureHunter,this._enemy),this._drawBoard()};startGame=()=>{this._drawGame()}}const game=new Game(context,canvas.width,canvas.height);game.startGame();