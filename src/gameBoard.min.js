import{Grass}from"./GameObjects/grass.js";import{getRandomNr,PathWayFinder}from"./Helpers/helperlib.js";import{Wall}from"./GameObjects/wall.js";import{Treasure}from"./GameObjects/treasure.js";import{Vector2D}from"./Helpers/vector2D.js";export class GameBoard{_tiles=[];_grassTiles=[];_treasureTiles=[];_wallTiles=[];constructor(s,t,e=15,i=15,r=3,h=10){this.canvasWidth=s,this.canvasHeight=t,this._rows=e,this._columns=i,this._treasureCount=r,this._wallCount=h,this._generateTiles()}get tiles(){return this._tiles}_generateTiles=()=>{this._tiles=[],this._treasureTiles=[],this._wallTiles=[],this._grassTiles=[];let s=[],t=this._rows*this._columns-this._wallCount-this._treasureCount;for(let e=0;e<t;e++){let t=new Grass;this._grassTiles.push(t),s.push(t)}for(let t=0;t<this._wallCount;t++){let t=new Wall;this._wallTiles.push(t),s.splice(getRandomNr(0,s.length-1),0,t)}for(let t=0;t<this._treasureCount;t++){let t=new Treasure;this._treasureTiles.push(t),s.splice(getRandomNr(0,s.length-1),0,t)}s.map(((s,t)=>{s.x=t%this._columns,s.y=parseInt(t/this._rows),s.width=this.canvasWidth/this._columns,s.height=this.canvasHeight/this._rows}));for(let t=0;t<this._rows;t++)this._tiles.push(s.slice(t*this._rows,t*this._rows+this._columns))};placeTreasureHunterAndEnemy=(s,t)=>{let e=new PathWayFinder(this,["Grass","Treasure"]),i=!1;for(;!i;){let t=this._grassTiles[getRandomNr(0,this._grassTiles.length-1)],r=!0;this._treasureTiles.forEach((s=>{e.canFindPathBetweenPoints(t.pos,s.pos)||(r=!1)})),r?(s.x=t.pos.x,s.y=t.pos.y,s.width=t.width,s.height=t.height,i=!0):this._generateTiles()}let r=new Vector2D;s.x<this._columns/2?r.x=getRandomNr(this._columns/2,this._columns):r.x=getRandomNr(0,this._columns/2),s.y<this._rows/2?r.y=getRandomNr(this._rows/2,this._rows):r.y=getRandomNr(0,this._rows/2);let h=r.x*r.y,l=this._grassTiles[h];i=!1;let a=0,o=this._columns/2*(this._rows/2);for(;!i&&a<o;)l&&e.canFindPathBetweenPoints(l.pos,s.pos)&&(t.x=l.pos.x,t.y=l.pos.y,t.width=l.width,t.height=l.height,i=!0),h>=this._grassTiles.length&&(h=0),l=this._grassTiles[++h],a++};getTile(s,t){return this._tiles[t]?.[s]}collectTreasureTile(s){let t=this._treasureTiles.findIndex((t=>t===s));if(-1!==t){let e=new Grass(s.x,s.y,s.width,s.height);this._treasureTiles.splice(t,1),this._tiles[s.y][s.x]=e}}}