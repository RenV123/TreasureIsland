import{Vector2D}from"../Helpers/vector2D.js";import{GameObject,DrawTypes}from"./gameObject.js";export class Enemy extends GameObject{type=DrawTypes.CIRCLE;color="#F94144";whiteListedTiles=["Grass"];constructor(e,t,s,r,a,o){super(s,r,a,o),this._gameboard=e,this._treasureHunter=t}moveToTreasureHunter(){let e={listOfPathWays:[],foundPathToTreasureHunter:!1,goldenPathIndex:-1,listOfCheckedSpots:[]};e.listOfPathWays.push([]),this._moveToTreasureHunterRecursive(this.pos,0,e),e.listOfPathWays=e.listOfPathWays.filter((e=>e.length>0&&this._treasureHunter.pos.equals(e[e.length-1]))),e.listOfPathWays.sort(((e,t)=>e.length-t.length)),e.listOfPathWays[0]?.length&&(this.x=e.listOfPathWays[0]?.[0].x,this.y=e.listOfPathWays[0]?.[0].y),e.listOfCheckedSpots.forEach((e=>{this._gameboard.getTile(e.x,e.y).color="#93B27B"})),e.listOfPathWays[0]?.forEach((e=>{this._gameboard.getTile(e.x,e.y).color="#8ED954"}))}_moveToTreasureHunterRecursive(e,t,s){if(s.listOfCheckedSpots.push(e),e.equals(this._treasureHunter.pos))return s.foundPathToTreasureHunter=!0,void(s.goldenPathIndex=t);let r=Vector2D.subtract(this._treasureHunter.pos,e);if(r.length()>0){let a=Vector2D.divide(r,r.length());a=new Vector2D(a.x>0?Math.ceil(a.x):Math.floor(a.x),a.y>0?Math.ceil(a.y):Math.floor(a.y));let o=[this._gameboard.getTile(e.x+1,e.y),this._gameboard.getTile(e.x-1,e.y),this._gameboard.getTile(e.x,e.y+1),this._gameboard.getTile(e.x,e.y-1)];o.sort(((e,t)=>Vector2D.subtract(this._treasureHunter.pos,e.pos).length()-Vector2D.subtract(this._treasureHunter.pos,t.pos).length()));for(let e=0;e<o.length;e++)if(o[e]&&this.whiteListedTiles.includes(o[e].constructor.name)&&!s.listOfCheckedSpots.includes(o[e].pos)){if(e<2)return s.listOfPathWays[t].push(o[e].pos),void this._moveToTreasureHunterRecursive(o[e].pos,t,s);s.listOfPathWays.push([...s.listOfPathWays[t],o[e].pos]),this._moveToTreasureHunterRecursive(o[e].pos,t+1,s)}}}_canMoveOnTile(e,t){let s=this._gameboard.getTile(e,t);return this.whiteListedTiles.includes(s.constructor.name)}}